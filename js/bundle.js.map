{"version":3,"sources":["webpack:///./src/js/app/app.js","webpack:///./src/js/app/services.js","webpack:///webpack/bootstrap","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///webpack/startup"],"names":[],"mappings":";;;;;;;;;;;;AAAuC;;AAEvC;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,SAAS,OAAO;AAChB,2BAA2B,iDAAiD;AAC5E;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,yBAAyB;AAChD;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,sDAAW;AACX;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,KAAK;AACL,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,UAAU,sDAAW;AACrB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;;AAEA;AACA,uBAAuB,iDAAiD;AACxE;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,iBAAiB;AAChC;AACA;AACA,kDAAkD,uCAAuC,EAAE;AAC3F;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,iBAAiB;AACpC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,CAAC;;AAED;AACA,6C;;;;;;;;;;;;;;AC5NA;;AAEA;AACA;AACA;AACA,2CAA2C,IAAI,YAAY,WAAW;AACtE;AACA;AACA;;;;;;;;UCRA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCrBA;WACA;WACA;WACA;WACA,wCAAwC,yCAAyC;WACjF;WACA;WACA,E;;;;;WCPA,sF;;;;;WCAA;WACA;WACA;WACA,sDAAsD,kBAAkB;WACxE;WACA,+CAA+C,cAAc;WAC7D,E;;;;UCNA;UACA;UACA;UACA","file":"bundle.js","sourcesContent":["import {getResource} from './services';\r\n\r\nconst headElem = document.getElementById(\"head\");\r\nconst buttonsElem = document.getElementById(\"buttons\");\r\nconst pagesElem = document.getElementById(\"pages\");\r\nconst btnRestart = document.querySelector('.restart');\r\n\r\n// //Массив с вопросами и ответами\r\nlet questions = [];\r\n\r\n// //Массив с результатами \r\nlet results = [];\r\n\r\n//Класс, представляющий сам тест\r\nclass Quiz {\r\n    constructor (type, questions, results) {\r\n        // Type test. Classic - 1 / 2 \r\n        this.type = type;\r\n\r\n        // Массив с вопросами\r\n        this.questions = questions;\r\n\r\n        // Массив с возможными результатам\r\n        this.results = results;\r\n\r\n        // Количество набранных очков\r\n        this.score = 0;\r\n\r\n        // Номер результата из массива\r\n        this.result = 0;\r\n\r\n        // Текущий вопрос\r\n        this.current = 0;\r\n    }\r\n\r\n    Click(index) {\r\n        // Добавляем очки\r\n        let value = this.questions[this.current].Click(index);\r\n        this.score += value;\r\n\r\n        let correct = -1;\r\n\r\n        //Если было добавлено хотя бы одно очко, то считаем, что ответ верный\r\n        if(value >= 1) {\r\n           correct = index;\r\n        } else { //Иначе ищем, какой ответ может быть правильным\r\n            for (let i = 0; i < this.questions[this.current].answers.length; i++) {\r\n                if (this.questions[this.current].answers[i].value >= 1) {\r\n                    correct = i;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n       this.Next();\r\n       return correct;\r\n    }\r\n\r\n    // Переход к следующем вопросу\r\n    Next () {\r\n        this.current++;\r\n        if (this.current >= this.questions.length) {\r\n            this.End();\r\n        }\r\n    }\r\n\r\n    // Если вопросы кончились, метод проверяет какой результат получился у пользователя\r\n    End () {\r\n        for (let i = 0; i < this.results.length; i++) {\r\n            if (this.results[i].Check(this.score)) {\r\n                this.result = i;\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n\r\n// Класс, представляющий вопросы\r\nclass Question {\r\n    constructor (text, answers) {\r\n        this.text = text;\r\n        this.answers = answers;\r\n    }\r\n    Click (index) {\r\n        return this.answers[index].value;\r\n    }\r\n}\r\n    \r\n// Класс, представляющий ответы\r\nclass Answer {\r\n   constructor(text, value) {\r\n       this.text = text;\r\n       this.value = value;\r\n   }\r\n}\r\n\r\n// Получаем вопросы и ответы с сервера\r\ngetResource('http://localhost:3000/questions')\r\n.then(data => {\r\n    data.forEach(function (element) {\r\n        for (let key in element) {\r\n            let array = [];\r\n            questions.push(new Question(key, array));\r\n            let answersInKey = element[key][0];\r\n\r\n            for (let key in answersInKey) {\r\n                array.push(new Answer(key, answersInKey[key]));\r\n            }\r\n\r\n        }\r\n    });\r\n});\r\n\r\n// Класс, представляющий результаты\r\nclass Result {\r\n    constructor (text, value) {\r\n        this.text = text;\r\n        this.value = value;\r\n    }\r\n\r\n    // Проверка достаточно ли очков набрал юзер\r\n    Check (value) {\r\n        if (this.value <= value) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n\r\nUpdate();\r\n\r\nasync function Update () {\r\n    // Дожидаемся ответа результатов с сервера\r\n    await getResource('http://localhost:3000/results')\r\n    .then(data => {\r\n        data.forEach(function (element) {\r\n            for (let key in element) {\r\n                results.push(new Result(element[key], key));\r\n            }\r\n        });\r\n    });\r\n\r\n    if (quiz.current < quiz.questions.length) {\r\n        // Если есть, меняем вопрос в заголовке\r\n        headElem.innerHTML = quiz.questions[quiz.current].text;\r\n\r\n        // Удаляем старые варианты ответов\r\n        buttonsElem.innerHTML = '';\r\n\r\n        // Создаем кнопки для новых ваиантов ответов \r\n        for (let i = 0; i < quiz.questions[quiz.current].answers.length; i++) {\r\n            let btn = document.createElement('button');\r\n            btn.className = 'button';\r\n            btn.innerHTML = quiz.questions[quiz.current].answers[i].text;\r\n            btn.setAttribute('index', i);\r\n            buttonsElem.appendChild(btn);\r\n        }\r\n\r\n        //Выводим номер текущего вопроса\r\n        pagesElem.innerHTML = (quiz.current + 1) + ' / ' + quiz.questions.length;\r\n\r\n        // Вызываем функцию, которая прикрепит события к новым кнопкам\r\n        Init();\r\n    } else {\r\n        // Если конец то показывае результат\r\n        btnRestart.style.display = 'block';\r\n        buttonsElem.innerHTML = '';\r\n        headElem.innerHTML = quiz.results[quiz.result].text;\r\n        pagesElem.innerHTML = 'Очки: ' + quiz.score;\r\n    }\r\n}\r\n\r\n// Инициализируем все кнопки\r\nfunction Init(){\r\n\t//Находим все кнопки\r\n\tlet btns = document.getElementsByClassName(\"button\");\r\n\tfor(let i = 0; i < btns.length; i++) {\r\n\t\t//Прикрепляем событие для каждой отдельной кнопки\r\n\t\t//При нажатии на кнопку будет вызываться функция Click()\r\n\t\tbtns[i].addEventListener(\"click\", function (e) { Click(e.target.getAttribute(\"index\")); });\r\n\t}\r\n}\r\n\r\n// Обрабатываем клик по ответу\r\nfunction Click (index) {\r\n    // Правильный ответ:\r\n    let correct = quiz.Click(index);\r\n    // Находим все кнопки.\r\n    let btns = document.getElementsByClassName('button');\r\n\r\n    // Делаем кнопки серыми\r\n    for (let i = 0; i < btns.length; i++) {\r\n        btns[i].className = 'button button_passive';\r\n    }\r\n\r\n    //Если это тест тип №1, то мы подсвечиваем правильный ответ зелёным, а неправильный - красным\r\n   if(quiz.type == 1) {\r\n       if(correct >= 0) {\r\n           btns[correct].className = \"button button_correct\";\r\n       }\r\n       if(index != correct) {\r\n           btns[index].className = \"button button_wrong\";\r\n       }\r\n   }\r\n   else {\r\n       //Иначе просто подсвечиваем зелёным ответ пользователя\r\n       btns[index].className = \"button button_correct\";\r\n   }\r\n \r\n   //Ждём секунду и обновляем тест\r\n   setTimeout(Update, 1000);\r\n}\r\n\r\n// Начинаем опрос сначала\r\nbtnRestart.addEventListener('click', () => {\r\n    location.reload();\r\n});\r\n\r\n//Сам тест\r\nconst quiz = new Quiz(1, questions, results);","const logServic = 'services';\r\n\r\nasync function getResource(url) {\r\n    let res = await fetch(url);\r\n    if (!res.ok) {\r\n        throw new Error(`Could not fetch ${url}, status: ${res.status}`);\r\n    }\r\n    return await res.json();\r\n}\r\n\r\nexport {getResource};","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop)","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// startup\n// Load entry module\n__webpack_require__(\"./src/js/app/app.js\");\n// This entry module used 'exports' so it can't be inlined\n"],"sourceRoot":""}